# coding=gbk
__author__ = 'generated by py-ui4win'

import string, os, time
import threading
from ctypes import *
import json

from PyUI import *
from PyFrameBase import *
from CommonUtil import *

WM_FROM_JS = 0x0400
WM_FROM_IEWEBBROWSER = 0x0401


class BrowserEventHandler(CWebBrowserEventHandler):
    """
    description
    """
    def __init__(self):
        super(BrowserEventHandler, self).__init__()

    def CallCustomHandle(self, params):
        CommonUtils.SecurePrint('InvokePyFun')
        CommonUtils.SecurePrint(params)
        return 1

class MainFrame(PyFrameBase):
    def __init__(self):
        super(MainFrame, self).__init__()
        self.clsName = self.__class__.__name__
        self.skinFileName = self.__class__.__name__ + '.xml'

    # 不要改动
    def GetSkinFile(self):
        return self.skinFileName

    # 不要改动
    def GetWindowClassName(self):
        return self.clsName

    # 退出处理
    def OnClose(self, uMsg, wParam, lParam):
        windll.kernel32.ExitProcess(0)
        return 0

    def _HandleCommandFromJs(self, wParam):
        try:
            self.ret2js = '{"ret" : 1, "msg" : "处理失败", "content" : null }'

            params = PyWinUtils().Conver2string(wParam)
            CommonUtils.SecurePrint('_HandleCommandFromJs' + params)
            paramsjson = json.loads(params.decode('gbk'))
            

            if paramsjson['fun'] == "func1":
                self.ret2js = '{"ret" : 0, "msg":"处理成功", "content" : null}'
                PyWinUtils().MessageBox(self.GetHWnd(),
                                                '这是python弹出的对话框',
                                                "提示",
                                                win32con.MB_ICONWARNING | win32con.MB_YESNO)

            elif paramsjson['fun'] == "func2":
                self.ret2js = '{"ret" : 0, "msg":"处理成功", "content" : null}'

            elif paramsjson['fun'] == "func3":
                self.msg = '这个消息 是python 调用js传过来的'
                self.MyRobotBrowser.CallJs(id(self.msg))
                self.ret2js = '{"ret" : 0, "msg" : "处理成功", "content" : { "xxxxxx" : 1 } }'

        except:
            CommonUtils.SecurePrint(traceback.format_exc())

        return id(self.ret2js)


    # virtual LRESULT HandleCustomMessage(UINT uMsg, WPARAM wParam, LPARAM lParam);
    def HandleCustomMessageInternal(self, uMsg, wParam, lParam):
        """
        description
        """
        if uMsg == WM_FROM_IEWEBBROWSER:
            params = PyWinUtils().Conver2string(wParam)
            CommonUtils.SecurePrint('加载完成：' + params)

        elif uMsg == WM_FROM_JS:
            return self._HandleCommandFromJs(wParam)

        return 0
    
    # 准备显示前的处理
    def OnPrepare(self, sendor, wParam, lParam):
        # 声明控件
        self.FunctionTabs = self.PyFindTabLayout("FunctionTabs")
        self.MyRobotBrowser = self.PyFindWebBrowser("MyBrowser")

        self.MyRobotBrowser.SetWebBrowserEventHandler(BrowserEventHandler())
        self.MyRobotBrowser.SetHomePage(os.path.join(PyWin32Util.GetExeDirectory(), 'skin', 'index.html'))
        self.MyRobotBrowser.Navigate2(os.path.join(PyWin32Util.GetExeDirectory(), 'skin', 'index.html'))

    # 界面事件处理
    def OnNotify(self, sendor, sType, wParam, lParam):
        # 用户点击事件
        if sType == DUI_MSGTYPE_CLICK:
            if sendor == "minbtn":
                self.MinimizeWindow()
            elif sendor == "maxbtn":
                self.MaximizeWindow()
                
            elif sendor == "restorebtn":
                self.RestoreWindow()
                
            elif sendor == "closebtn":
                self.CloseWindow()
                